Binary files ./xv6-pnu-p2/.proc.c.swp and ./xv6-pnu-p2-201624473/.proc.c.swp differ
diff -urN ./xv6-pnu-p2/Makefile ./xv6-pnu-p2-201624473/Makefile
--- ./xv6-pnu-p2/Makefile	2019-04-04 13:20:47.000000000 +0900
+++ ./xv6-pnu-p2-201624473/Makefile	2020-04-28 22:06:18.816485103 +0900
@@ -181,6 +181,12 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_minitop\
+	_test1\
+	_test2\
+	_test3\
+	_test4\
+	_test5\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +223,7 @@
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 1
+CPUS = 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff -urN ./xv6-pnu-p2/defs.h ./xv6-pnu-p2-201624473/defs.h
--- ./xv6-pnu-p2/defs.h	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-p2-201624473/defs.h	2020-04-24 19:41:11.357771299 +0900
@@ -120,7 +120,10 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
-
+int             getnice(int);
+int		setnice(int,int);
+void		ps(int);
+ 
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff -urN ./xv6-pnu-p2/minitop.c ./xv6-pnu-p2-201624473/minitop.c
--- ./xv6-pnu-p2/minitop.c	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-p2-201624473/minitop.c	2020-04-25 11:59:14.878627461 +0900
@@ -0,0 +1,18 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int
+main(int argc, char **argv)
+{
+  
+  int pid;
+
+  pid = atoi(argv[1]);
+
+  ps(pid);
+
+
+  exit();
+}
diff -urN ./xv6-pnu-p2/proc.c ./xv6-pnu-p2-201624473/proc.c
--- ./xv6-pnu-p2/proc.c	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-p2-201624473/proc.c	2020-04-28 23:47:16.637831173 +0900
@@ -88,7 +88,7 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->nice = 20;   //default priority
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -200,8 +200,9 @@
   np->parent = curproc;
   *np->tf = *curproc->tf;
 
+  np->nice = curproc->nice; //child and parent nicevalue same! //additional code
   // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
+  np->tf->eax = 0;             
 
   for(i = 0; i < NOFILE; i++)
     if(curproc->ofile[i])
@@ -322,37 +323,62 @@
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *p;    
+  struct proc *p1;   // for comparison
+  struct proc *temp; //temporary higher priority process
+  //temporary highest priority(lower nice);
+ // struct proc *temp_pid[100];
   struct cpu *c = mycpu();
+ // int same_nice_pid=0;
+
   c->proc = 0;
   
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
 
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+	if(p->state != RUNNABLE)
+	   continue;
+	temp = p;
+        for(p1 = ptable.proc;p1<&ptable.proc[NPROC];p1++){
+     	   if(p1->state != RUNNABLE)
+	      continue;
+	   if(temp->nice>p1->nice){ //if p1 is lower nice, then it must be high
+		temp = p1;
+	   }
+/*	   else if(temp->nice==p1->nice){
+		temp_pid[same_nice_pid]=p1;
+		same_nice_pid+=1;*/
+	  /* else if(temp->nice==p1->nice){
+		if(temp->pid<p1->pid)
+			break;
+		else
+			temp = p1;
+	   }*/
+	  /* else if(temp->nice==p1->nice){
+		break;
+	   }*/
+	}
+        p = temp; //because higher prior, it must be first. //dont touch
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
-      c->proc = 0;
+        c->proc = 0;
     }
     release(&ptable.lock);
-
-  }
+   }
 }
 
 // Enter scheduler.  Must hold only ptable.lock
@@ -532,3 +558,166 @@
     cprintf("\n");
   }
 }
+
+int
+getnice(int pid)
+{
+  int nice_value, check_pid=0; //check_pid for existence of p!
+
+  struct proc *p;
+
+  if(pid<=0){ //if pid number is 0 or lower, return -1(fault)
+    return -1;
+  }
+
+    acquire(&ptable.lock); //borrow ptable
+
+    for(p=ptable.proc; p<&ptable.proc[NPROC]; p++)
+    {
+      if(p->pid == pid) //if pid match
+      {
+        nice_value = p->nice; // store its nice
+        check_pid = 1; //pid exist
+        break;
+      }
+     /* if(p->pid == pid)
+      {
+	nice_value = p->nice;
+	return nice_value;    //error code
+      }*/
+    }
+
+    release(&ptable.lock);
+
+    if(check_pid == 0) //if no pid exist
+        return -1; //return -1(fault)
+    else
+	return nice_value; //pid exist, then return nice!(success)
+}
+
+int
+setnice(int pid, int nice_value)
+{
+  int check_pid=0;
+
+  struct proc *p;
+  
+  if(nice_value<0||nice_value>40||pid<=0){ //nice value must be 0<=nice<=40!
+     return -1; //fault argument!!
+  }
+
+    acquire(&ptable.lock);
+
+    for(p=ptable.proc;p<&ptable.proc[NPROC];p++)
+    {
+      if(p->pid==pid) //if pid exist
+      {
+        p->nice =nice_value; //pid's nice value change
+        check_pid = 1; //pid exist
+	myproc()->state = RUNNABLE;
+	sched();
+        break;
+      }
+     /* if(p->pid==pid)
+      {
+	p->nice = nice_value;
+	return 0;                        //error code
+      }*/
+    }
+
+    release(&ptable.lock);
+  
+    if(check_pid == 0)
+       return -1; //if there is no pid match, return -1;(fault)
+    else
+	return 0; //pid exist, then swap the nice value, and return 0;(success)
+}
+
+void
+ps(int pid)
+{
+  
+  sti();
+
+  struct proc *p;
+  //int child_pid=fork();
+
+  acquire(&ptable.lock);
+
+    /*if(child_pid==0){
+	cprintf("pid\tppid\tprio\tstate\tname\n");
+	for(p=ptable.proc;p<&ptable.proc[NPROC];p++)
+	{
+	  if(p->state==EMBRYO)
+	    cprintf("%d\t1\t%d\tEMBRYO\t%s\n",p->pid,p->nice,p->name);
+	  else if(p->state==SLEEPING)
+	    cprintf("%d\t1\t%d\tSLEEPING\t%s\n",p->pid,p->nice,p->name);
+	  else if(p->state==RUNNING)
+	    cprintf("%d\t1\t%d\tRUNNING\t%s\n",p->pid,p->nice,p->name);
+	  else if(p->state==ZOMBIE)
+	    cprintf("%d\t1\t%d\tZOMBIE\t%s\n",p->pid,p->nice,p->name);
+	}
+     }*/
+  if(pid==0)
+  {
+    cprintf("pid\tppid\tprio\tstate\tname\n");
+    for(p=ptable.proc;p<&ptable.proc[NPROC];p++)
+    {
+      int temp = p->parent->pid;
+      if(temp<10000){
+      if(p->state == RUNNABLE)
+	 cprintf("%d\t%d\t%d\trunnable\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == SLEEPING)
+	 cprintf("%d\t%d\t%d\tsleep\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == RUNNING)
+	 cprintf("%d\t%d\t%d\trun\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == ZOMBIE)
+	 cprintf("%d\t%d\t%d\tZOMBIE\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      }
+     else{
+	if(p->state == RUNNABLE)
+	 cprintf("%d\t1\t%d\trunnable\t%s\n",p->pid,p->nice,p->name);
+      else if(p->state == SLEEPING)
+	 cprintf("%d\t1\t%d\tsleep\t%s\n",p->pid,p->nice,p->name);
+      else if(p->state == RUNNING)
+	 cprintf("%d\t%d\t%d\trun\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == ZOMBIE)
+	 cprintf("%d\t%d\t%d\tZOMBIE\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      }
+    }
+  }
+  else
+  {
+     for(p = ptable.proc; p<&ptable.proc[NPROC];p++)
+     {
+      if(p->pid == pid)
+      { int temp = p->parent->pid;
+        cprintf("pid\tppid\tnice\tstatus\tname\n");
+       if(temp>10000){
+      if(p->state == RUNNABLE)
+	cprintf("%d\t1\t%d\trunnable\t%s\n",p->pid,p->nice,p->name);
+      else if(p->state == SLEEPING)
+	cprintf("%d\t1\t%d\tsleep\t%s\n",p->pid,p->nice,p->name);
+      else if(p->state == RUNNING)
+	cprintf("%d\t%d\t%d\trun\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == ZOMBIE)
+	cprintf("%d\t%d\t%d\tZOMBIE\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+       break;
+	}
+	else{
+	  if(p->state == RUNNABLE)
+	    cprintf("%d\t%d\t%d\trunnable\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == SLEEPING)
+	cprintf("%d\t%d\t%d\tsleep\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == RUNNING)
+	 cprintf("%d\t%d\t%d\tRUNNING\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+      else if(p->state == ZOMBIE)
+	cprintf("%d\t%d\t%d\tZOMBIE\t%s\n",p->pid,p->parent->pid,p->nice,p->name);
+       break;
+	}
+      }
+     }
+   }
+
+   release(&ptable.lock);
+}
diff -urN ./xv6-pnu-p2/proc.h ./xv6-pnu-p2-201624473/proc.h
--- ./xv6-pnu-p2/proc.h	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-p2-201624473/proc.h	2020-04-24 21:15:43.863080448 +0900
@@ -49,6 +49,7 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int nice;              // process priority(0~40) lowernice,higherpriority
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -urN ./xv6-pnu-p2/syscall.c ./xv6-pnu-p2-201624473/syscall.c
--- ./xv6-pnu-p2/syscall.c	2019-04-04 11:17:39.000000000 +0900
+++ ./xv6-pnu-p2-201624473/syscall.c	2020-04-24 18:01:15.489049290 +0900
@@ -104,6 +104,9 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_yield(void);
+extern int sys_getnice(void);
+extern int sys_setnice(void);
+extern int sys_ps(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +131,9 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_yield]   sys_yield,
+[SYS_getnice] sys_getnice,
+[SYS_setnice] sys_setnice,
+[SYS_ps] sys_ps,
 };
 
 void
diff -urN ./xv6-pnu-p2/syscall.h ./xv6-pnu-p2-201624473/syscall.h
--- ./xv6-pnu-p2/syscall.h	2019-04-04 11:18:03.000000000 +0900
+++ ./xv6-pnu-p2-201624473/syscall.h	2020-04-24 17:59:10.481720801 +0900
@@ -21,3 +21,6 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_yield  22
+#define SYS_getnice 23
+#define SYS_setnice 24
+#define SYS_ps 25
diff -urN ./xv6-pnu-p2/sysproc.c ./xv6-pnu-p2-201624473/sysproc.c
--- ./xv6-pnu-p2/sysproc.c	2019-04-04 11:19:03.000000000 +0900
+++ ./xv6-pnu-p2-201624473/sysproc.c	2020-04-28 23:54:07.399944239 +0900
@@ -96,4 +96,34 @@
   yield();
   return 0;
 }
+int
+sys_getnice(void)
+{
+  int pid;
+  if(argint(0, &pid) <0)
+	 return -1;
 
+  return getnice(pid);
+}
+
+int
+sys_setnice(void)
+{
+  int pid, nice_value;
+  if(argint(0, &pid) <0)
+    return -1;
+  if(argint(1, &nice_value)<0||argint(1, &nice_value)>40)
+    return -1;
+  return setnice(pid, nice_value);
+}
+
+int
+sys_ps(void)
+{
+  int pid;
+  if(argint(0, &pid) <0)
+	 return -1;
+
+  ps(pid);
+  return 1;
+}
diff -urN ./xv6-pnu-p2/test4.c ./xv6-pnu-p2-201624473/test4.c
--- ./xv6-pnu-p2/test4.c	2019-04-04 13:16:27.000000000 +0900
+++ ./xv6-pnu-p2-201624473/test4.c	2020-04-28 23:20:56.974002703 +0900
@@ -10,7 +10,6 @@
 
 	setnice(1, 19);
 	setnice(getpid(), 2);
-
 	pid1 = fork();
 
 	if(pid1 == 0){
diff -urN ./xv6-pnu-p2/user.h ./xv6-pnu-p2-201624473/user.h
--- ./xv6-pnu-p2/user.h	2019-04-04 11:19:50.000000000 +0900
+++ ./xv6-pnu-p2-201624473/user.h	2020-04-24 19:39:43.434609283 +0900
@@ -24,6 +24,9 @@
 int sleep(int);
 int uptime(void);
 void yield(void);
+int getnice(int);
+int setnice(int, int);
+void ps(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -urN ./xv6-pnu-p2/usys.S ./xv6-pnu-p2-201624473/usys.S
--- ./xv6-pnu-p2/usys.S	2019-04-04 11:25:04.000000000 +0900
+++ ./xv6-pnu-p2-201624473/usys.S	2020-04-24 18:02:49.184524742 +0900
@@ -30,3 +30,6 @@
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(yield)
+SYSCALL(getnice)
+SYSCALL(setnice)
+SYSCALL(ps)
